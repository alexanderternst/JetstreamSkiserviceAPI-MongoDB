use SkiServiceDB

db.registrations.drop()
db.createCollection("registrations", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         title: "Registration Object Validation",
         required: [ "name", "priority", "status", "service" ],
         properties: {
            name: {
               bsonType: "string",
               description: "'Name' must be an int and is required"
            },
            email: {
               bsonType: "string",
               description: "'Email' must be a string"
            },
            phone: {
               bsonType: "string",
               description: "'Phone' must be a string"
            },
            create_date: {
               bsonType: "date",
               description: "'Create_Date' must be a date"
            },
            pickup_date: {
               bsonType: "date",
               description: "'Pickup_Date' must be a string"
            },
            status: {
               bsonType: "string",
               description: "'Status' must be a string",
               enum: ["Offen", "InArbeit", "abgeschlossen"]
            },
            priority: {
                bsonType: "string",
                description: "'Priority' must be a string",
                enum: ["Express", "Standard", "Tief"]
            },
            service: {
                bsonType: "string",
                description: "'Service' must be a string",
                enum: ["Kleiner-Service", "Grosser-Service", "Rennski-Service", "Bindung-montieren-und-einstellen", "Fell-zuschneiden", "Heisswachsen"]
            },
            comment: {
                bsonType: "string",
                description: "'Comment' must be a string"
            }
        }  
      }
   }
}
 )

db.users.drop()
db.createCollection("users", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         title: "User Object Validation",
         required: [ "username", "password", "counter", "role" ],
         properties: {
            username: {
               bsonType: "string",
               description: "'username' must be a string and is required"
            },
            password: {
               bsonType: "string",
               description: "'password' must be a string and is required"
            },
            counter: {
               bsonType: "int",
               minimum: 0,
               maximum: 3,
               description: "'counter' must be an int and is required"
            },
            role: {
               bsonType: "string",
               enum: ["level1", "level2", "level3"],
               description: "'role' must be a string and is required"
            }
        }  
      }
   }
}
 )

db.registrations.createIndex( { name: 1, priority: 1, status: 1, service: 1 } )
db.users.createIndex( { username: 1, counter: 1} )

db.registrations.getIndexes()
db.users.getIndexes()